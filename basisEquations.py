# This exercise code is generated by GPT. With following Prompt:

# Problem Statements:
# Given the following two homogeneous linear equations:
# Print each equation in LaTeX format for the student to solve.
# Please find a basis for the subspace defined by these equations.
#
# User Input:
# Read the student's input, expecting a list of basis vectors.
# Convert the input to sympy matrices.
#
# Validation:
# Construct the coefficient matrix for the system of equations.
# Check the rank of the coefficient matrix.
# Check the number of basis vectors provided by the student.
# Verify if the number of basis vectors is correct.
# Combine the basis vectors into a matrix and check if they are linearly independent.
# Verify each basis vector to ensure it is a valid basis vector for the null space.
#
# Feedback:
# If the number of basis vectors is incorrect, raise an exception with an appropriate message.
# If any basis vector is not valid, raise an exception with an appropriate message.
# If all checks pass, print a confirmation message that the student's suggested basis is correct.
#
# Cautions:
# Always include necessary packages: import json, random, from sympy import Matrix, symbols, Eq, latex.
# Ensure to use "$$ {latex(...)} $$" for MathJax to correctly display mathematical expressions.

import json
import random
from sympy import Matrix, symbols, Eq, latex

# Number of variables
n = 4

# Define variables
x = symbols('x1 x2 x3 x4')

# Random coefficients for two homogeneous linear equations
coeffs = [[random.randint(-5, 5) for _ in range(n)] for _ in range(2)]

# Create equations
equations = [Eq(sum(coeffs[i][j] * x[j] for j in range(n)), 0) for i in range(2)]

# Print the problem statement
print("Given the following two homogeneous linear equations:")
for eq in equations:
    print(f"$$ {latex(eq)} $$")
print("Please find a basis for the subspace defined by these equations.")

# Read the student's input (expecting a list of basis vectors)
X = json.loads(input()) #matrix

# Convert the input to sympy matrices
basis_vectors = [Matrix(v) for v in X]

# Construct the coefficient matrix for the system of equations
coeff_matrix = Matrix(coeffs)

# Check the rank of the coefficient matrix
rank_coeff_matrix = coeff_matrix.rank()

# Check the number of basis vectors provided by the student
num_basis_vectors = len(basis_vectors)

# Verify if the number of basis vectors is correct
if rank_coeff_matrix + num_basis_vectors != n:
    raise Exception(f"Your answer is incorrect. The number of basis vectors should be {n - rank_coeff_matrix}.")

# Combine the basis vectors into a matrix
basis_matrix = Matrix.hstack(*basis_vectors)

# Check if the basis vectors are linearly independent
if basis_matrix.rank() != num_basis_vectors:
    raise Exception("The provided vectors are not linearly independent and thus do not form a basis.")

# Verify each basis vector
for vec in basis_vectors:
    if vec.rows != n or vec.cols != 1:
        raise Exception(f"Each basis vector must be a column vector of size {n}.")
    if coeff_matrix * vec != Matrix([0, 0]):
        raise Exception(f"The vector $$ {latex(vec)} $$ is not in the null space of the coefficient matrix.")

print("Your suggested basis is correct.")

