# This exercise code is generated by GPT. With the following prompt:

# Problem Statements:
# Given a 3x3 matrix, ask the student to come up with an eigenvalue and an eigenvector of that eigenvalue.
# Ensure the eigenvector is non-zero (rank 1).
#
# User Input:
# The first input should be an integer representing the eigenvalue.
# The second input should be a matrix representing the eigenvector.
#
# Validation:
# Ensure the first input is an integer (the eigenvalue).
# Ensure the second input is a matrix (the eigenvector).
# Verify that the provided eigenvector is non-zero and has the correct dimensions (3x1).
# Verify that the provided eigenvalue is actually an eigenvalue of the given matrix.
# Check if the provided eigenvalue and eigenvector satisfy the eigenvalue equation for the given matrix.
#
# Feedback:
# If the first input is not an integer, raise an exception with an appropriate message.
# If the second input is not a matrix, raise an exception with an appropriate message.
# If the eigenvector is not non-zero or does not have the correct dimensions, raise an exception with an appropriate message.
# If the provided eigenvalue is not an eigenvalue of the matrix, raise an exception with an appropriate message.
# If the provided eigenvalue and eigenvector do not satisfy the eigenvalue equation, raise an exception with an appropriate message.
# If the eigenvalue is correct, print a confirmation message.
# If all checks pass, print a confirmation message that the student's eigenvalue and eigenvector are correct.
#
# Cautions:
# Always include necessary packages: import json, random, from sympy import Matrix, eye, diag, latex.
# Ensure to use "$$ {latex(...)} $$" for MathJax to correctly display mathematical expressions.
# Use double braces {{...}} to avoid conflicts with Python's string formatting.

import json
import random
from sympy import Matrix, eye, diag, latex

# Define the size of the matrix
n = 3

# Generate a random integer invertible matrix P with determinant 1
scale = 4  # Scale of randomness
upper = [[1 if i == j else 0 if i < j else int(random.random() * scale) for j in range(n)] for i in range(n)]
lower = [[1 if i == j else 0 if i > j else int(random.random() * scale) for j in range(n)] for i in range(n)]
switch = list(range(n))
random.shuffle(switch)
sw = eye(n)[switch, :]
up = Matrix(upper)
lo = Matrix(lower)
P = sw * up * lo

# Generate a diagonal matrix with integer eigenvalues
eigenvalues = [random.randint(1, 10) for _ in range(n)]
Lambda = diag(*eigenvalues)

# Create the matrix A with integer eigenvalues
A = P.inv() * Lambda * P

# Print the problem statement
print("Given the following 3x3 matrix:")
print(f"$$A = {latex(A)}$$")
print("Please come up with an eigenvalue and an eigenvector of that eigenvalue.")

# First input: Eigenvalue
eigenvalue = int(input())

# Process the eigenvalue input
if not isinstance(eigenvalue, int):
    raise Exception("The eigenvalue must be an integer.")

# Verify that the provided eigenvalue is actually an eigenvalue of the given matrix
if eigenvalue not in eigenvalues:
    raise Exception("The provided eigenvalue is not an eigenvalue of the matrix.")

print(f"You suggested one eigenvalue is {eigenvalue}, that's correct. Now please find an eigenvector for this eigenvalue.")

# Second input: Eigenvector
X = json.loads(input()) #matrix

# Check that there is exactly one vector provided
if len(X) != 1:
    raise Exception(f"You should enter exactly one matrix, but {len(X)} many matrices are detected")

# Convert the input to a sympy matrix
eigenvector = Matrix(X[0])

# Verify that the eigenvector is non-zero and has the correct dimensions (3x1)
if eigenvector.rows != 3 or eigenvector.cols != 1:
    raise Exception("The eigenvector must be a non-zero column vector of size 3x1.")
if eigenvector.rank() == 0:
    raise Exception("The eigenvector must be non-zero.")

# Check if the provided eigenvalue and eigenvector satisfy the eigenvalue equation
if not A * eigenvector == eigenvalue * eigenvector:
    raise Exception("The provided eigenvalue and eigenvector do not satisfy the eigenvalue equation.")

print("Your suggested eigenvalue and eigenvector are correct.")

